//merge sort
#include<stdio.h>
#include<iostream>
#include<omp.h>
using namespace std;
void merge(int *arr,int l,int m,int r)
{
    int i,j,k;
    int n1=m-l+1;
    int n2=r-m;

    int *L=new int[n1];
    int *R=new int[n2];

    for(i=0;i<n1;i++)
    {
        L[i]=arr[l+i];
    }
    for(j=0;j<n2;j++)
    {
        R[j]=arr[m+1+j];
    }
    i=0;
    j=0;
    k=l;

    while(i<n1 && j<n2)
    {
        if(L[i]<=R[j])
        {
            arr[k++]=L[i++];
        }
        else
        {
            arr[k++]=R[j++];
        }
    }

    while(i<n1)
    {
        arr[k++]=L[i++];
    }
    while(j<n2)
    {
        arr[k++]=R[j++];
    }
    delete [] L;
    delete [] R;
}
void mergeSort(int *arr,int l,int r)
{
    if(l<r)
    {
        int m=l+(r-l)/2;
        #pragma omp parallel sections
        {
            #pragma omp section
            mergeSort(arr,l,m);
            
            #pragma omp section
            mergeSort(arr,m+1,r);
        }
        merge(arr,l,m,r);
    }
}
int main()
{
    int arr[]={10,15,45,78,22};
    int n=sizeof(arr)/sizeof(arr[0]);
    double start,stop;
    start=omp_get_wtime();
    #pragma omp parallel
    {
        #pragma omp single
        mergeSort(arr,0,n-1);
    }
    stop=omp_get_wtime();
    cout<<"Sorted array is"<<endl;
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<endl;
    }
    cout<<"Time taken"<<(stop-start);
    return 0;
}
